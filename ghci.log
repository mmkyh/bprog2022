GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/momoka/bprog2022/.ghci
2022-05-19 15:41:44.025786069
>>> 29+88
117
2022-05-19 15:54:24.70676695
>>> 29*88*46
117392
2022-05-19 15:55:00.266384276
>>> 5-77
-72
2022-05-19 15:55:43.955928284
>>> (2-3)-1
-2
2022-05-19 15:57:27.00024829
>>> sqrt 2
1.4142135623730951
2022-05-19 15:58:59.834110853
>>> sqrt 16
4.0
2022-05-19 15:59:19.630694026
>>> double 3

<interactive>:7:1: error: Variable not in scope: double :: t0 -> t
2022-05-19 16:02:11.40074207
>>> GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/momoka/bprog2022/.ghci
2022-05-26 15:02:08.053609457
>>> maxBound :: Int
9223372036854775807
2022-05-26 15:03:39.115265571
>>> 2 ^ 63 - 1
9223372036854775807
2022-05-26 15:05:05.014790499
>>> minBound :: Int
-9223372036854775808
2022-05-26 15:05:28.742294206
>>> :e src/First.hs
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
Ok, no modules loaded.
2022-05-26 15:49:03.503028244
>>> :l src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-05-26 15:49:03.559158737
>>> :e
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
Ok, one module loaded.
2022-05-26 15:56:00.672720251
>>> double 123
246
2022-05-26 15:56:19.796306333
>>> 
2022-05-26 15:56:19.83148618
>>> double( 1 + 2 )
6
2022-05-26 15:58:32.820145548
>>> double(1+3)
8
2022-05-26 15:59:53.378252083
>>> :q
Leaving GHCi.
GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/momoka/bprog2022/.ghci
2022-06-09 14:55:08.831519284
>>> 2+3*4
14
2022-06-09 14:57:58.251544002
>>> (2+3)*4
20
2022-06-09 15:00:21.756637905
>>> :i sqrt
type Floating :: * -> Constraint
class Fractional a => Floating a where
  ...
  sqrt :: a -> a
  ...
  	-- Defined in ‘GHC.Float’
2022-06-09 15:00:47.829904659
>>> sqrt (3^2+4^2)
5.0
2022-06-09 15:03:59.469813143
>>> sqrt (25 :: Int)

<interactive>:5:1: error:
    • No instance for (Floating Int) arising from a use of ‘sqrt’
    • In the expression: sqrt (25 :: Int)
      In an equation for ‘it’: it = sqrt (25 :: Int)
2022-06-09 15:08:21.89674662
>>> sqrt (25 :: Double)
5.0
2022-06-09 15:09:43.397373388
>>> sqrt 25
5.0
2022-06-09 15:10:37.825075601
>>> hoge 25 :: Int

<interactive>:8:1: error: Variable not in scope: hoge :: t0 -> Int
2022-06-09 15:13:28.489206856
>>> head [1,2,3]
1
2022-06-09 15:46:22.732519991
>>> head [3,1,4,1,5]
3
2022-06-09 15:46:53.508280141
>>> head []
*** Exception: Prelude.head: empty list
2022-06-09 15:48:47.191167294
>>> hoge = [3,1,4,1,5] :: [Int]
2022-06-09 15:50:33.353602968
>>> hoge
[3,1,4,1,5]
2022-06-09 15:50:58.465155582
>>> head hoge
3
2022-06-09 15:51:26.478362172
>>> tail hoge
[1,4,1,5]
2022-06-09 15:51:33.497004609
>>> tail []
*** Exception: Prelude.tail: empty list
2022-06-09 15:52:34.559978769
>>> hoge !! 0
3
2022-06-09 15:55:10.61238125
>>> hoge !! 2
4
2022-06-09 15:56:22.863715273
>>> take 3 hoge
[3,1,4]
2022-06-09 15:56:55.028791017
>>> hoge
[3,1,4,1,5]
2022-06-09 15:57:04.131379951
>>> drop 3 hoge
[1,5]
2022-06-09 15:57:21.141869433
>>> drop 2 hoge
[4,1,5]
2022-06-09 15:57:35.189969428
>>> hoge 5 hoge

<interactive>:23:1: error:
    • Couldn't match expected type: t0 -> [Int] -> t
                  with actual type: [Int]
    • The function ‘hoge’ is applied to two value arguments,
        but its type ‘[Int]’ has none
      In the expression: hoge 5 hoge
      In an equation for ‘it’: it = hoge 5 hoge
    • Relevant bindings include it :: t (bound at <interactive>:23:1)
2022-06-09 15:58:24.705573175
>>> hoge !! 5
*** Exception: Prelude.!!: index too large
2022-06-09 15:58:54.596017279
>>> take 10

<interactive>:25:1: error:
    • No instance for (Show ([a0] -> [a0]))
        arising from a use of ‘print’
        (maybe you haven't applied a function to enough arguments?)
    • In a stmt of an interactive GHCi command: print it
2022-06-09 15:59:12.359327977
>>> take 10 hoge
[3,1,4,1,5]
2022-06-09 15:59:30.197152526
>>> drop 10 hoge
[]
2022-06-09 15:59:43.796761904
>>> length hoge
5
2022-06-09 16:01:07.827903935
>>> hoge ++ hoge
[3,1,4,1,5,3,1,4,1,5]
2022-06-09 16:04:51.186444308
>>> product hoge
60
2022-06-09 16:05:04.592090834
>>> reverse hoge
[5,1,4,1,3]
2022-06-09 16:05:34.736024739
>>> :e src/First.hs
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
Ok, no modules loaded.
2022-06-09 16:08:00.965307725
>>> :load src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-09 16:08:01.035443696
>>> double 3+3
9
2022-06-09 16:08:28.660306555
>>> quadruple 2

<interactive>:35:1: error:
    Variable not in scope: quadruple :: t0 -> t
2022-06-09 16:15:28.227441094
>>> git add .

<interactive>:36:10: error:
    parse error (possibly incorrect indentation or mismatched brackets)
2022-06-09 16:17:14.672179114
>>> git commit -m "update"

<interactive>:37:1: error:
    • Variable not in scope: git :: t1 -> a
    • Perhaps you meant ‘it’ (line 34)

<interactive>:37:5: error: Variable not in scope: commit

<interactive>:37:13: error: Variable not in scope: m :: t0 -> a
2022-06-09 16:17:42.938226684
>>> git push

<interactive>:38:1: error:
    • Variable not in scope: git :: t0 -> t
    • Perhaps you meant ‘it’ (line 34)

<interactive>:38:5: error: Variable not in scope: push
2022-06-09 16:17:49.329938102
>>> :quit
Leaving GHCi.
GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/momoka/bprog2022/.ghci
2022-06-16 15:01:43.299299217
>>> take 3 [3,1,4,1,5]
[3,1,4]
2022-06-16 15:04:20.031067947
>>> take 4 [3,2,1,4,2]
[3,2,1,4]
2022-06-16 15:06:37.188368852
>>> :e src/First.hs
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
Ok, no modules loaded.
2022-06-16 15:10:48.116655736
>>> :l src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-16 15:10:48.187080234
>>> double

<interactive>:5:1: error:
    • No instance for (Show (Int -> Int)) arising from a use of ‘print’
        (maybe you haven't applied a function to enough arguments?)
    • In a stmt of an interactive GHCi command: print it
2022-06-16 15:13:00.590615006
>>> take (double 2) [1,2,3,4,5]
[1,2,3,4]
2022-06-16 15:15:13.564102434
>>> [1 .. 10]
[1,2,3,4,5,6,7,8,9,10]
2022-06-16 15:20:15.039060305
>>> :e
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
   8  
   9  factorial :: Integer -> Integer
  10  factorial n = product [1 .. n]
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-16 15:21:03.870943863
>>> factorial 3
6
2022-06-16 15:22:14.294121348
>>> factorial 4
24
2022-06-16 15:22:23.704268374
>>> :e
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
   8  
   9  factorial :: Integer -> Integer
  10  factorial n = product [1 .. n]
  11  
  12  average :: Int -> Int
  13  average xs = sum xs `div` length xs
  14  
  15  ave :: [Int] -> Int
  16  ave xs = div (sum xs)(length xs)
  17  
[1 of 1] Compiling First            ( src/First.hs, interpreted )

src/First.hs:13:18: error:
    • Couldn't match expected type ‘t0 Int’ with actual type ‘Int’
    • In the first argument of ‘sum’, namely ‘xs’
      In the first argument of ‘div’, namely ‘sum xs’
      In the expression: sum xs `div` length xs
   |
13 | average xs = sum xs `div` length xs
   |                  ^^

src/First.hs:13:34: error:
    • Couldn't match expected type ‘t1 a0’ with actual type ‘Int’
    • In the first argument of ‘length’, namely ‘xs’
      In the second argument of ‘div’, namely ‘length xs’
      In the expression: sum xs `div` length xs
   |
13 | average xs = sum xs `div` length xs
   |                                  ^^
Failed, no modules loaded.
2022-06-16 15:39:09.123040529
>>> average [1,2,3,4,5]

<interactive>:12:1: error:
    Variable not in scope: average :: [a0] -> t
2022-06-16 15:39:27.074749064
>>> :e
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
   8  
   9  factorial :: Integer -> Integer
  10  factorial n = product [1 .. n]
  11  
  12  average :: Int -> Int
  13  average xs = sum xs `div` length xs
  14  
  15  ave :: [Int] -> Int
  16  ave xs = div (sum xs) (length xs)
  17  
[1 of 1] Compiling First            ( src/First.hs, interpreted )

src/First.hs:13:18: error:
    • Couldn't match expected type ‘t0 Int’ with actual type ‘Int’
    • In the first argument of ‘sum’, namely ‘xs’
      In the first argument of ‘div’, namely ‘sum xs’
      In the expression: sum xs `div` length xs
   |
13 | average xs = sum xs `div` length xs
   |                  ^^

src/First.hs:13:34: error:
    • Couldn't match expected type ‘t1 a0’ with actual type ‘Int’
    • In the first argument of ‘length’, namely ‘xs’
      In the second argument of ‘div’, namely ‘length xs’
      In the expression: sum xs `div` length xs
   |
13 | average xs = sum xs `div` length xs
   |                                  ^^
Failed, no modules loaded.
2022-06-16 15:40:11.785698028
>>> :e
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
   8  
   9  factorial :: Integer -> Integer
  10  factorial n = product [1 .. n]
  11  
  12  average :: Int -> Int
  13  average xs = sum xs `div` length xs
  14  
  15  ave :: [Int] -> Int
  16  ave xs = div (sum xs) (length xs)
  17  
[1 of 1] Compiling First            ( src/First.hs, interpreted )

src/First.hs:13:18: error:
    • Couldn't match expected type ‘t0 Int’ with actual type ‘Int’
    • In the first argument of ‘sum’, namely ‘xs’
      In the first argument of ‘div’, namely ‘sum xs’
      In the expression: sum xs `div` length xs
   |
13 | average xs = sum xs `div` length xs
   |                  ^^

src/First.hs:13:34: error:
    • Couldn't match expected type ‘t1 a0’ with actual type ‘Int’
    • In the first argument of ‘length’, namely ‘xs’
      In the second argument of ‘div’, namely ‘length xs’
      In the expression: sum xs `div` length xs
   |
13 | average xs = sum xs `div` length xs
   |                                  ^^
Failed, no modules loaded.
2022-06-16 15:41:02.08396002
>>> average [1,2,3,4,5]

<interactive>:15:1: error:
    Variable not in scope: average :: [a0] -> t
2022-06-16 15:41:15.297930491
>>> 
2022-06-16 15:44:00.987372178
>>> :e
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
   8  
   9  factorial :: Integer -> Integer
  10  factorial n = product [1 .. n]
  11  
  12  average :: Int -> Int
  13  average xs = sum xs `div` length xs
  14  
  15  ave :: [Int] -> Int
  16  ave xs = div (sum xs) (length xs)
  17  
[1 of 1] Compiling First            ( src/First.hs, interpreted )

src/First.hs:13:18: error:
    • Couldn't match expected type ‘t0 Int’ with actual type ‘Int’
    • In the first argument of ‘sum’, namely ‘xs’
      In the first argument of ‘div’, namely ‘sum xs’
      In the expression: sum xs `div` length xs
   |
13 | average xs = sum xs `div` length xs
   |                  ^^

src/First.hs:13:34: error:
    • Couldn't match expected type ‘t1 a0’ with actual type ‘Int’
    • In the first argument of ‘length’, namely ‘xs’
      In the second argument of ‘div’, namely ‘length xs’
      In the expression: sum xs `div` length xs
   |
13 | average xs = sum xs `div` length xs
   |                                  ^^
Failed, no modules loaded.
2022-06-16 15:44:21.369620243
>>> :e
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
   8  
   9  factorial :: Integer -> Integer
  10  factorial n = product [1 .. n]
  11  
  12  average :: [Int] -> Int
  13  average xs = sum xs `div` length xs
  14  
  15  ave :: [Int] -> Int
  16  ave xs = div (sum xs) (length xs)
  17  
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-16 15:45:22.798714755
>>> average [1,2,3,4,5]
3
2022-06-16 15:45:37.938999956
>>> :t take 3 [1,2,3,4,5]
take 3 [1,2,3,4,5] :: Num a => [a]
2022-06-16 15:49:43.702805376
>>> init [1 .. 5]
[1,2,3,4]
2022-06-16 16:07:01.068201071
>>> :e
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
   8  
   9  factorial :: Integer -> Integer
  10  factorial n = product [1 .. n]
  11  
  12  average :: [Int] -> Int
  13  average xs = sum xs `div` length xs
  14  
  15  ave :: [Int] -> Int
  16  ave xs = div (sum xs) (length xs)
  17  
  18  myinit :: [a] -> [a]
  19  myinit (x:[]) = []
  20  myinit (x:xs) = x : (init xs)
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-16 16:14:39.408147498
>>> myinit [1 .. 5]
[1,2,3,4]
2022-06-16 16:14:51.994835118
>>> myinit []
*** Exception: src/First.hs:(19,1)-(20,29): Non-exhaustive patterns in function myinit

2022-06-16 16:14:58.911653106
>>> :q
Leaving GHCi.
GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/momoka/bprog2022/.ghci
2022-06-23 14:56:12.802686943
>>> :i Num
type Num :: * -> Constraint
class Num a where
  (+) :: a -> a -> a
  (-) :: a -> a -> a
  (*) :: a -> a -> a
  negate :: a -> a
  abs :: a -> a
  signum :: a -> a
  fromInteger :: Integer -> a
  {-# MINIMAL (+), (*), abs, signum, fromInteger, (negate | (-)) #-}
  	-- Defined in ‘GHC.Num’
instance Num NominalDiffTime
  -- Defined in ‘time-1.9.3:Data.Time.Clock.Internal.NominalDiffTime’
instance Num DiffTime
  -- Defined in ‘time-1.9.3:Data.Time.Clock.Internal.DiffTime’
instance Num Word -- Defined in ‘GHC.Num’
instance Num Integer -- Defined in ‘GHC.Num’
instance Num Int -- Defined in ‘GHC.Num’
instance Num Float -- Defined in ‘GHC.Float’
instance Num Double -- Defined in ‘GHC.Float’
2022-06-23 14:56:30.631902939
>>> 1<2
True
2022-06-23 15:06:25.108079799
>>> 1>1
False
2022-06-23 15:06:30.675591246
>>> 1<1
False
2022-06-23 15:06:34.620839919
>>> 1<=1
True
2022-06-23 15:06:44.743430654
>>> 'a' < 'B'
False
2022-06-23 15:11:48.08593171
>>> ' ' < 'a'
True
2022-06-23 15:12:27.715280738
>>>  'ab' < 'b'

<interactive>:8:2: error:
    • Syntax error on 'ab'
      Perhaps you intended to use TemplateHaskell or TemplateHaskellQuotes
    • In the Template Haskell quotation 'ab'
2022-06-23 15:13:04.593674836
>>> 1 /= 2
True
2022-06-23 15:15:53.405063837
>>> 1 /= 1
False
2022-06-23 15:16:04.979396727
>>> :info abs
type Num :: * -> Constraint
class Num a where
  ...
  abs :: a -> a
  ...
  	-- Defined in ‘GHC.Num’
2022-06-23 15:30:14.658899564
>>> abs

<interactive>:12:1: error:
    • No instance for (Show (Integer -> Integer))
        arising from a use of ‘print’
        (maybe you haven't applied a function to enough arguments?)
    • In a stmt of an interactive GHCi command: print it
2022-06-23 15:30:47.318803435
>>> abs(-234)
234
2022-06-23 15:34:40.15480258
>>> abs (-234)
234
2022-06-23 15:35:06.373282811
>>> GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/momoka/bprog2022/.ghci
2022-06-30 14:57:21.155939617
>>> [ x ^ 2 | x <- [1 .. 5] ]
[1,4,9,16,25]
2022-06-30 15:02:09.653605988
>>> map (^2)[1..5]
[1,4,9,16,25]
2022-06-30 15:05:14.336076565
>>> [x*2|x<-[1..5]

<interactive>:3:15: error:
    parse error (possibly incorrect indentation or mismatched brackets)
2022-06-30 15:12:33.319129238
>>> [ x * 2 | x <- [ 1 .. 5 ] ]
[2,4,6,8,10]
2022-06-30 15:13:12.102929966
>>> [ x `div` 2 | x <- [ 1 .. 5 ] ]
[0,1,1,2,2]
2022-06-30 15:14:01.966021126
>>> [x`divMod`2|x<-[1..5]]
[(0,1),(1,0),(1,1),(2,0),(2,1)]
2022-06-30 15:16:08.976780387
>>> [(x,y)|x<-"abc",y<-[4,5]]
[('a',4),('a',5),('b',4),('b',5),('c',4),('c',5)]
2022-06-30 15:21:07.811712298
>>> [(x,y)|y<-[4.5],x<-"abc"]
[('a',4.5),('b',4.5),('c',4.5)]
2022-06-30 15:21:46.054705778
>>> myconcat [[1,2,3],[4,5],[6,7,8,9]]

<interactive>:9:1: error:
    • Variable not in scope: myconcat :: [[a0]] -> t
    • Perhaps you meant one of these:
        ‘mconcat’ (imported from Prelude), ‘concat’ (imported from Prelude)
2022-06-30 15:27:25.019417386
>>> myconcat [[1,2,3],[4,5],[6,7,8,9]]

<interactive>:10:1: error:
    • Variable not in scope: myconcat :: [[a0]] -> t
    • Perhaps you meant one of these:
        ‘mconcat’ (imported from Prelude), ‘concat’ (imported from Prelude)
2022-06-30 15:28:24.734931787
>>> add myconcat

<interactive>:11:1: error:
    • Variable not in scope: add :: t0 -> t
    • Perhaps you meant one of these:
        ‘and’ (imported from Prelude), ‘odd’ (imported from Prelude)

<interactive>:11:5: error:
    • Variable not in scope: myconcat
    • Perhaps you meant one of these:
        ‘mconcat’ (imported from Prelude), ‘concat’ (imported from Prelude)
2022-06-30 15:29:04.339217899
>>> :e src/First.hs
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
   8  
   9  factorial :: Integer -> Integer
  10  factorial n = product [1 .. n]
  11  
  12  average :: [Int] -> Int
  13  average xs = sum xs `div` length xs
  14  
  15  ave :: [Int] -> Int
  16  ave xs = div (sum xs) (length xs)
  17  
  18  myinit :: [a] -> [a]
  19  myinit (x:[]) = []
  20  myinit (x:xs) = x : (init xs)
  21  
  22  myconcat :: [[a]] -> [a]
  23  meconcat xss = [ x | xs <- xss, x <- xs]
Ok, no modules loaded.
2022-06-30 15:29:36.190603622
>>> :l src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )

src/First.hs:22:1: error:
    The type signature for ‘myconcat’ lacks an accompanying binding
      Perhaps you meant ‘meconcat’ (Defined at src/First.hs:23:1)
   |
22 | myconcat :: [[a]] -> [a]
   | ^^^^^^^^
Failed, no modules loaded.
2022-06-30 15:29:36.280346163
>>> myconcat [[1,2,3],[4,5],[6,7,8,9]]

<interactive>:14:1: error:
    • Variable not in scope: myconcat :: [[a0]] -> t
    • Perhaps you meant one of these:
        ‘mconcat’ (imported from Prelude), ‘concat’ (imported from Prelude)
2022-06-30 15:30:23.292481317
>>> :e src/First.hs
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
   8  
   9  factorial :: Integer -> Integer
  10  factorial n = product [1 .. n]
  11  
  12  average :: [Int] -> Int
  13  average xs = sum xs `div` length xs
  14  
  15  ave :: [Int] -> Int
  16  ave xs = div (sum xs) (length xs)
  17  
  18  myinit :: [a] -> [a]
  19  myinit (x:[]) = []
  20  myinit (x:xs) = x : (init xs)
  21  
  22  myconcat :: [[a]] -> [a]
  23  meconcat xss = [ x | xs <- xss, x <- xs]
[1 of 1] Compiling First            ( src/First.hs, interpreted )

src/First.hs:22:1: error:
    The type signature for ‘myconcat’ lacks an accompanying binding
      Perhaps you meant ‘meconcat’ (Defined at src/First.hs:23:1)
   |
22 | myconcat :: [[a]] -> [a]
   | ^^^^^^^^
Failed, no modules loaded.
2022-06-30 15:31:05.383035463
>>> :l src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )

src/First.hs:22:1: error:
    The type signature for ‘myconcat’ lacks an accompanying binding
      Perhaps you meant ‘meconcat’ (Defined at src/First.hs:23:1)
   |
22 | myconcat :: [[a]] -> [a]
   | ^^^^^^^^
Failed, no modules loaded.
2022-06-30 15:31:05.481746782
>>> :e src/First.hs
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
   8  
   9  factorial :: Integer -> Integer
  10  factorial n = product [1 .. n]
  11  
  12  average :: [Int] -> Int
  13  average xs = sum xs `div` length xs
  14  
  15  ave :: [Int] -> Int
  16  ave xs = div (sum xs) (length xs)
  17  
  18  myinit :: [a] -> [a]
  19  myinit (x:[]) = []
  20  myinit (x:xs) = x : (init xs)
  21  
  22  myconcat :: [[a]] -> [a]
  23  meconcat xss = [ x | xs <- xss, x <- xs]
  24  
  25  mylength :: [a] -> Int
  26  mylength xs = sum [ 1 | _ <- xs ]
[1 of 1] Compiling First            ( src/First.hs, interpreted )

src/First.hs:22:1: error:
    The type signature for ‘myconcat’ lacks an accompanying binding
      Perhaps you meant ‘meconcat’ (Defined at src/First.hs:23:1)
   |
22 | myconcat :: [[a]] -> [a]
   | ^^^^^^^^
Failed, no modules loaded.
2022-06-30 15:51:21.594791086
>>> :l src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )

src/First.hs:22:1: error:
    The type signature for ‘myconcat’ lacks an accompanying binding
      Perhaps you meant ‘meconcat’ (Defined at src/First.hs:23:1)
   |
22 | myconcat :: [[a]] -> [a]
   | ^^^^^^^^
Failed, no modules loaded.
2022-06-30 15:51:21.693258205
>>> :e src/First.hs
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
   8  
   9  factorial :: Integer -> Integer
  10  factorial n = product [1 .. n]
  11  
  12  average :: [Int] -> Int
  13  average xs = sum xs `div` length xs
  14  
  15  ave :: [Int] -> Int
  16  ave xs = div (sum xs) (length xs)
  17  
  18  myinit :: [a] -> [a]
  19  myinit (x:[]) = []
  20  myinit (x:xs) = x : (init xs)
  21  
  22  myconcat :: [[a]] -> [a]
  23  meconcat xss = [ x | xs <- xss, x <- xs]
  24  
  25  mylength :: [a] -> Int
  26  mylength xs = sum [ 1 | _ <- xs ]
[1 of 1] Compiling First            ( src/First.hs, interpreted )

src/First.hs:22:1: error:
    The type signature for ‘myconcat’ lacks an accompanying binding
      Perhaps you meant ‘meconcat’ (Defined at src/First.hs:23:1)
   |
22 | myconcat :: [[a]] -> [a]
   | ^^^^^^^^
Failed, no modules loaded.
2022-06-30 15:52:47.087405463
>>> :l src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )

src/First.hs:22:1: error:
    The type signature for ‘myconcat’ lacks an accompanying binding
      Perhaps you meant ‘meconcat’ (Defined at src/First.hs:23:1)
   |
22 | myconcat :: [[a]] -> [a]
   | ^^^^^^^^
Failed, no modules loaded.
2022-06-30 15:52:47.186012653
>>> :e
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
   8  
   9  factorial :: Integer -> Integer
  10  factorial n = product [1 .. n]
  11  
  12  average :: [Int] -> Int
  13  average xs = sum xs `div` length xs
  14  
  15  ave :: [Int] -> Int
  16  ave xs = div (sum xs) (length xs)
  17  
  18  myinit :: [a] -> [a]
  19  myinit (x:[]) = []
  20  myinit (x:xs) = x : (init xs)
  21  
  22  myconcat :: [[a]] -> [a]
  23  meconcat xss = [ x | xs <- xss, x <- xs]
  24  
  25  mylength :: [a] -> Int
  26  mylength xs = sum [ 1 | _ <- xs ]
[1 of 1] Compiling First            ( src/First.hs, interpreted )

src/First.hs:22:1: error:
    The type signature for ‘myconcat’ lacks an accompanying binding
      Perhaps you meant ‘meconcat’ (Defined at src/First.hs:23:1)
   |
22 | myconcat :: [[a]] -> [a]
   | ^^^^^^^^
Failed, no modules loaded.
2022-06-30 15:53:13.80898691
>>> :e
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
   8  
   9  factorial :: Integer -> Integer
  10  factorial n = product [1 .. n]
  11  
  12  average :: [Int] -> Int
  13  average xs = sum xs `div` length xs
  14  
  15  ave :: [Int] -> Int
  16  ave xs = div (sum xs) (length xs)
  17  
  18  myinit :: [a] -> [a]
  19  myinit (x:[]) = []
  20  myinit (x:xs) = x : (init xs)
  21  
  22  myconcat :: [[a]] -> [a]
  23  myconcat xss = [ x | xs <- xss, x <- xs]
  24  
  25  mylength :: [a] -> Int
  26  mylength xs = sum [ 1 | _ <- xs ]
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-30 15:54:17.700705672
>>> ['a' .. 'z']
"abcdefghijklmnopqrstuvwxyz"
2022-06-30 15:54:42.743639817
>>> ['あ' .. 'ん

<interactive>:24:11: error:
    parse error (possibly incorrect indentation or mismatched brackets)
2022-06-30 15:55:09.688935575
>>> ['あ' .. 'ん']
"\12354\12355\12356\12357\12358\12359\12360\12361\12362\12363\12364\12365\12366\12367\12368\12369\12370\12371\12372\12373\12374\12375\12376\12377\12378\12379\12380\12381\12382\12383\12384\12385\12386\12387\12388\12389\12390\12391\12392\12393\12394\12395\12396\12397\12398\12399\12400\12401\12402\12403\12404\12405\12406\12407\12408\12409\12410\12411\12412\12413\12414\12415\12416\12417\12418\12419\12420\12421\12422\12423\12424\12425\12426\12427\12428\12429\12430\12431\12432\12433\12434\12435"
2022-06-30 15:55:40.514588016
>>> putStrLn it
あぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてでとどなにぬねのはばぱひびぴふぶぷへべぺほぼぽまみむめもゃやゅゆょよらりるれろゎわゐゑをん
2022-06-30 15:56:17.290923849
>>> :q
Leaving GHCi.
GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/momoka/bprog2022/.ghci
2022-07-07 16:05:04.73702294
>>> :e src/Caesar.hs
   1  module Caesar where
   2  
   3  import Data.Char
Ok, no modules loaded.
2022-07-07 16:05:21.036482121
>>> :l src/Caesar.hs
[1 of 1] Compiling Caesar           ( src/Caesar.hs, interpreted )
Ok, one module loaded.
2022-07-07 16:05:21.136645328
>>> ord 'A'
65
2022-07-07 16:05:46.623439642
>>> ord 'a'
97
2022-07-07 16:06:01.276736025
>>> import Data.Char
2022-07-07 16:10:46.759302863
>>> :q
Leaving GHCi.
GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/momoka/bprog2022/.ghci
2022-07-14 15:11:19.900148312
>>> :e src/Caesar.hs
   1  module Caesar where
   2  
   3  import Data.Char
   4  
   5  let2int :: Char -> Int
   6  let2int c = ord c
Ok, no modules loaded.
2022-07-14 15:11:48.053851245
>>> :l src/Caesar.hs
[1 of 1] Compiling Caesar           ( src/Caesar.hs, interpreted )
Ok, one module loaded.
2022-07-14 15:11:48.121908005
>>> let2int 'a'
97
2022-07-14 15:12:44.264400661
>>> let2int 'z'
122
2022-07-14 15:13:25.478439993
>>> :e
   1  module Caesar where
   2  
   3  import Data.Char
   4  
   5  let2int :: Char -> Int
   6  let2int c = ord c - ord 'a'
[1 of 1] Compiling Caesar           ( src/Caesar.hs, interpreted )
Ok, one module loaded.
2022-07-14 15:15:15.126658068
>>> let2int 'a'
0
2022-07-14 15:15:32.392990926
>>> let2int 'z'
25
2022-07-14 15:15:58.222227853
>>> ord 'a'
97
2022-07-14 15:19:09.770379827
>>> chr 97
'a'
2022-07-14 15:19:18.818861575
>>> :e
   1  module Caesar where
   2  
   3  import Data.Char
   4  
   5  let2int :: Char -> Int
   6  let2int c = ord c - ord 'a'
   7  
   8  int2let :: Int -> Char
   9  int2let i = chr (i + ord 'a')
[1 of 1] Compiling Caesar           ( src/Caesar.hs, interpreted )
Ok, one module loaded.
2022-07-14 15:20:17.342529171
>>> int2let 0
'a'
2022-07-14 15:20:24.759048416
>>> int2let 25
'z'
2022-07-14 15:20:33.504297025
>>> :e
   1  module Caesar where
   2  
   3  import Data.Char
   4  
   5  let2int :: Char -> Int
   6  let2int c = ord c - ord 'a'
   7  
   8  int2let :: Int -> Char
   9  int2let n = chr (i + ord 'a' + n)
  10  
  11  shift :: Int -> (Char -> Char)
  12  shift n c 
  13      | isLower c = int2let ((let2int c + n) `mod` 26)
  14      |otherwise = c
  15      
[1 of 1] Compiling Caesar           ( src/Caesar.hs, interpreted )

src/Caesar.hs:9:18: error: Variable not in scope: i :: Int
  |
9 | int2let n = chr (i + ord 'a' + n)
  |                  ^
Failed, no modules loaded.
2022-07-14 15:27:35.765942745
>>> :e
   1  module Caesar where
   2  
   3  import Data.Char
   4  
   5  let2int :: Char -> Int
   6  let2int c = ord c - ord 'a'
   7  
   8  int2let :: Int -> Char
   9  int2let n = chr (ord 'a' + n)
  10  
  11  shift :: Int -> (Char -> Char)
  12  shift n c 
  13      | isLower c = int2let ((let2int c + n) `mod` 26)
  14      |otherwise = c
[1 of 1] Compiling Caesar           ( src/Caesar.hs, interpreted )
Ok, one module loaded.
2022-07-14 15:28:03.536338655
>>> shift 3 'a'
'd'
2022-07-14 15:28:16.393678345
>>> shift (-3) 'd'
'a'
2022-07-14 15:28:30.322386843
>>> shift 3 ' '
' '
2022-07-14 15:32:58.170587936
>>> shift 3 'z'
'c'
2022-07-14 15:33:05.50291892
>>> 
2022-07-14 15:34:09.298468275
>>> :e
   1  module Caesar where
   2  
   3  import Data.Char
   4  
   5  let2int :: Char -> Int
   6  let2int c = ord c - ord 'a'
   7  
   8  int2let :: Int -> Char
   9  int2let n = chr (ord 'a' + n)
  10  
  11  shift :: Int -> (Char -> Char)
  12  shift n c 
  13      | isLower c = int2let ((let2int c + n) `mod` 26)
  14      |otherwise = c
  15  
  16  encode :: Int -> (String -> String)
  17  encode n xs = [ shift n x | x <- xs]
[1 of 1] Compiling Caesar           ( src/Caesar.hs, interpreted )
Ok, one module loaded.
2022-07-14 15:36:12.362275526
>>> encode 3 "haskell  is fun"
"kdvnhoo  lv ixq"
2022-07-14 15:36:33.105339921
>>> encode 3 "haskell is fun"
"kdvnhoo lv ixq"
2022-07-14 15:48:02.51634374
>>> it
"kdvnhoo lv ixq"
2022-07-14 15:48:22.905204095
>>> encode (-3) it
"haskell is fun"
2022-07-14 15:48:58.555742346
>>> :e
   1  module Caesar where
   2  
   3  import Data.Char
   4  
   5  let2int :: Char -> Int
   6  let2int c = ord c - ord 'a'
   7  
   8  int2let :: Int -> Char
   9  int2let n = chr (ord 'a' + n)
  10  
  11  shift :: Int -> (Char -> Char)
  12  shift n c 
  13      | isLower c = int2let ((let2int c + n) `mod` 26)
  14      |otherwise = c
  15  
  16  encode :: Int -> (String -> String)
  17  encode n xs = [ shift n x | x <- xs]
  18  
  19  table :: [Float]
  20  table - [8.1, 1.5, 2.8, 4.2, 12.7, 2.2, 2.0, 6.1, 7.0
  21          , 0.2, 0.8, 4.0, 2.4, 6.7, 7.5, 1.9, 0.1, 6.0
  22          ,6.3, 9.0, 2.8, 1.0, 2.4, 0.2, 2.0, 0.1
  23          ]
[1 of 1] Compiling Caesar           ( src/Caesar.hs, interpreted )

src/Caesar.hs:20:1: error:
    Parse error: module header, import declaration
    or top-level declaration expected.
   |
20 | table - [8.1, 1.5, 2.8, 4.2, 12.7, 2.2, 2.0, 6.1, 7.0
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...
Failed, no modules loaded.
2022-07-14 15:59:18.727346857
>>> :e
   1  module Caesar where
   2  
   3  import Data.Char
   4  
   5  let2int :: Char -> Int
   6  let2int c = ord c - ord 'a'
   7  
   8  int2let :: Int -> Char
   9  int2let n = chr (ord 'a' + n)
  10  
  11  shift :: Int -> (Char -> Char)
  12  shift n c 
  13      | isLower c = int2let ((let2int c + n) `mod` 26)
  14      |otherwise = c
  15  
  16  encode :: Int -> (String -> String)
  17  encode n xs = [ shift n x | x <- xs]
  18  
  19  table :: [Float]
  20  table - [ 8.1, 1.5, 2.8, 4.2, 12.7, 2.2, 2.0, 6.1, 7.0
  21          , 0.2, 0.8, 4.0, 2.4, 6.7, 7.5, 1.9, 0.1, 6.0
  22          ,6.3, 9.0, 2.8, 1.0, 2.4, 0.2, 2.0, 0.1
  23          ]
[1 of 1] Compiling Caesar           ( src/Caesar.hs, interpreted )

src/Caesar.hs:20:1: error:
    Parse error: module header, import declaration
    or top-level declaration expected.
   |
20 | table - [ 8.1, 1.5, 2.8, 4.2, 12.7, 2.2, 2.0, 6.1, 7.0
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...
Failed, no modules loaded.
2022-07-14 15:59:36.190336329
>>> :e
   1  module Caesar where
   2  
   3  import Data.Char
   4  
   5  let2int :: Char -> Int
   6  let2int c = ord c - ord 'a'
   7  
   8  int2let :: Int -> Char
   9  int2let n = chr (ord 'a' + n)
  10  
  11  shift :: Int -> (Char -> Char)
  12  shift n c 
  13      | isLower c = int2let ((let2int c + n) `mod` 26)
  14      |otherwise = c
  15  
  16  encode :: Int -> (String -> String)
  17  encode n xs = [ shift n x | x <- xs]
  18  
  19  table :: [Float]
  20  table = [ 8.1, 1.5, 2.8, 4.2, 12.7, 2.2, 2.0, 6.1, 7.0
  21          , 0.2, 0.8, 4.0, 2.4, 6.7, 7.5, 1.9, 0.1, 6.0
  22          ,6.3, 9.0, 2.8, 1.0, 2.4, 0.2, 2.0, 0.1
  23          ]
[1 of 1] Compiling Caesar           ( src/Caesar.hs, interpreted )
Ok, one module loaded.
2022-07-14 16:00:01.202490917
>>> length table
26
2022-07-14 16:00:10.284077592
>>> :e
   1  module Caesar where
   2  
   3  import Data.Char
   4  
   5  let2int :: Char -> Int
   6  let2int c = ord c - ord 'a'
   7  
   8  int2let :: Int -> Char
   9  int2let n = chr (ord 'a' + n)
  10  
  11  shift :: Int -> (Char -> Char)
  12  shift n c 
  13      | isLower c = int2let ((let2int c + n) `mod` 26)
  14      |otherwise = c
  15  
  16  encode :: Int -> (String -> String)
  17  encode n xs = [ shift n x | x <- xs]
  18  
  19  table :: [Float]
  20  table = [ 8.1, 1.5, 2.8, 4.2, 12.7, 2.2, 2.0, 6.1, 7.0
  21          , 0.2, 0.8, 4.0, 2.4, 6.7, 7.5, 1.9, 0.1, 6.0
  22          ,6.3, 9.0, 2.8, 1.0, 2.4, 0.2, 2.0, 0.1
  23          ]
  24  
  25  percent :: Int -> Int -> Float
  26  percent n m = (fromIntegral n / fromIntegral m) * 100
[1 of 1] Compiling Caesar           ( src/Caesar.hs, interpreted )
Ok, one module loaded.
2022-07-14 16:08:48.603736847
>>> percent 5 15
33.333336
2022-07-14 16:08:58.428559585
>>> :e
   1  module Caesar where
   2  
   3  import Data.Char
   4  
   5  let2int :: Char -> Int
   6  let2int c = ord c - ord 'a'
   7  
   8  int2let :: Int -> Char
   9  int2let n = chr (ord 'a' + n)
  10  
  11  shift :: Int -> (Char -> Char)
  12  shift n c 
  13      | isLower c = int2let ((let2int c + n) `mod` 26)
  14      |otherwise = c
  15  
  16  encode :: Int -> (String -> String)
  17  encode n xs = [ shift n x | x <- xs]
  18  
  19  table :: [Float]
  20  table = [ 8.1, 1.5, 2.8, 4.2, 12.7, 2.2, 2.0, 6.1, 7.0
  21          , 0.2, 0.8, 4.0, 2.4, 6.7, 7.5, 1.9, 0.1, 6.0
  22          ,6.3, 9.0, 2.8, 1.0, 2.4, 0.2, 2.0, 0.1
  23          ]
  24  
  25  percent :: Int -> Int -> Float
  26  percent n m = (fromIntegral n / fromIntegral m) * 100
  27  
  28  count :: Char -> (String -> Int)
  29  count x xs = length [ x' | x' <- xs, x == x']
[1 of 1] Compiling Caesar           ( src/Caesar.hs, interpreted )
Ok, one module loaded.
2022-07-14 16:14:35.830960858
>>> count 's'

<interactive>:32:1: error:
    • No instance for (Show (String -> Int))
        arising from a use of ‘print’
        (maybe you haven't applied a function to enough arguments?)
    • In a stmt of an interactive GHCi command: print it
2022-07-14 16:14:42.475967018
>>> :e
   1  module Caesar where
   2  
   3  import Data.Char
   4  
   5  let2int :: Char -> Int
   6  let2int c = ord c - ord 'a'
   7  
   8  int2let :: Int -> Char
   9  int2let n = chr (ord 'a' + n)
  10  
  11  shift :: Int -> (Char -> Char)
  12  shift n c 
  13      | isLower c = int2let ((let2int c + n) `mod` 26)
  14      |otherwise = c
  15  
  16  encode :: Int -> (String -> String)
  17  encode n xs = [ shift n x | x <- xs]
  18  
  19  table :: [Float]
  20  table = [ 8.1, 1.5, 2.8, 4.2, 12.7, 2.2, 2.0, 6.1, 7.0
  21          , 0.2, 0.8, 4.0, 2.4, 6.7, 7.5, 1.9, 0.1, 6.0
  22          ,6.3, 9.0, 2.8, 1.0, 2.4, 0.2, 2.0, 0.1
  23          ]
  24  
  25  percent :: Int -> Int -> Float
  26  percent n m = (fromIntegral n / fromIntegral m) * 100
  27  
  28  count :: Char -> (String -> Int)
  29  count x xs = length [ x' | x' <- xs, x == x']
Ok, one module loaded.
2022-07-14 16:15:23.708511293
>>> count 's' "Mississippi"
4
2022-07-14 16:15:45.690958539
>>> :q
Leaving GHCi.
